<?php
/*******************************************************************************
 *
 *   CrystalPHP Framework by Crystal Collective
 *   An open source application development framework for PHP
 *
 *   This file is part of CrystalPHP which is released under the MIT License (MIT)
 *
 *   Copyright (c) 2019 - 2019, Crystal Collective
 *
 *   For the full copyright and license information,
 *   please view the LICENSE file that was distributed with this source code.
 *
 ******************************************************************************/

/**
 * User: Pankaj Vaghela
 * Date: 31-05-2019
 * Time: 21:43
 */

use CrystalPHP\Config\Config;
use CrystalPHP\Config\Configs;
use CrystalPHP\Controller\SectionController;
use CrystalPHP\Document;

class ControllerBaseDefaultCommons extends SectionController{
	
	public function init(){
		parent::init(); // TODO: Change the autogenerated stub
		
	}
	
	/**
	 * @throws \CrystalPHP\Controller\ControllerException
	 */
	public function head(){
		
		//Document::addMetadata('csrf-token', "EFLK1QFY5CFu8PzxiTsqZBinXDR8WA5v8KS5nUAl");
		$this->view->setView(DIR_MODULE_BASE_DEFAULT . "/views/head.php");
		
		$this->addChild('styles', 0, DIR_MODULE_BASE_DEFAULT . "/controller_commons.php", "ControllerBaseDefaultCommons", 'setStyles');
		
		$this->view->assign('keywords', Document::getKeywords(true));
		$this->view->assign('description', Document::getDescription());
		$this->view->assign('metadata', Document::getMetadataAll());
		
		if(HTTPS === true){
			$this->view->assign('ssl', 1);
		}
		
		$this->view->batchAssign([
			'icon' => "/ic/logo/favicon.ico",
			'icon192' => "/ic/logo/ic192.png",
		]);
		
		$this->render();
	}
	
	
	/**
	 * @throws \CrystalPHP\Controller\ControllerException
	 */
	public function navbar_top(){
		parent::init(); // TODO: Change the autogenerated stub
		
		$this->view->setView(DIR_MODULE_BASE_DEFAULT . "/views/navbar_top.php");
		
		$this->render();
	}
	
	/**
	 * @throws \CrystalPHP\Controller\ControllerException
	 */
	public function footer(){
		parent::init(); // TODO: Change the autogenerated stub
		
		$this->view->setView(DIR_MODULE_BASE_DEFAULT . "/views/footer.php");
		
		$this->render();
	}
	
	/**
	 * @throws \CrystalPHP\Controller\ControllerException
	 */
	public function foot(){
		$this->view->setView(DIR_MODULE_BASE_DEFAULT . "/views/foot.php");
		
		$this->addChild('scripts', 0, DIR_MODULE_BASE_DEFAULT . "/controller_commons.php", "ControllerBaseDefaultCommons", 'setScripts');
		
		$this->render();
	}
	
	public function setScripts(){
		if(Config::get(Configs::MODE, Configs::MODE_DEV) === Configs::MODE_PROD){
			Document::addScriptLink([
				["src" => "https://code.jquery.com/jquery-3.4.0.min.js",
					"integrity" => "sha256-BJeo0qm959uMBGb65z40ejJYGSgR7REI4+CW1fNKwOg=",
					"crossorigin" => "anonymous",
				],
				["src" => "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js",
					"integrity" => "sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q",
					"crossorigin" => "anonymous",
				],
				["src" => "https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js",
					"integrity" => "sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl",
					"crossorigin" => "anonymous",
				],
			], 1);
			Document::addScriptLink([
//         	["src"=>"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js",],
				["src" => HTTPS_SERVER . '/res/js/vue.min.js'],
				["src" => HTTPS_SERVER . '/res/js/vendor.min.js'],
			]);
			
			Document::addScriptLink([
				["src" => HTTPS_SERVER . '/res/js/app.min.js'],
			], 10);
		} else{
			Document::addScriptLink([
				["src" => HTTPS_SERVER . '/res/js/libs/jquery.min.js'],
				["src" => HTTPS_SERVER . '/res/js/libs/popper.min.js'],
				["src" => HTTPS_SERVER . '/res/js/libs/bootstrap.min.js'],
			], 1);
			
			Document::addScriptLink([
				["src" => HTTPS_SERVER . 'res/js/libs/vue.js'],
//				["src" => HTTPS_SERVER . '/res/js/vue.js'],
				["src" => HTTPS_SERVER . '/res/js/vendor.js'],
			]);
			
			Document::addScriptLink([
				["src" => HTTPS_SERVER . '/res/js/app.js'],
			], 10);
			
		}
	}
	
	public function setStyles(){
		if(Config::get(Configs::MODE, Configs::MODE_DEV) === Configs::MODE_PROD){
			Document::addStyleLink([
				["rel" => "stylesheet",
					"href" => HTTPS_SERVER . "/res/css/fa.css",
				],
			], 2);
		}
		
		Document::addStyleLink([
			[
				"rel" => "stylesheet",
				"href" => HTTPS_SERVER . "/res/css/vendor.css",
			],
			[
				"rel" => "stylesheet",
				"href" => HTTPS_SERVER . "/res/css/app.css",
			],
		]);
		
	}
	
	
}